/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerRemoveNetwork

plugins {
    id 'com.bmuschko.docker-remote-api' version '9.3.2'
}

subprojects {
    apply plugin: 'com.bmuschko.docker-remote-api'

    ext {
        dataPrepperJarImageFilepath = 'bin/data-prepper/'
        targetJavaVersion = project.hasProperty('endToEndJavaVersion') ? project.getProperty('endToEndJavaVersion') : '11'
        targetOpenTelemetryVersion = project.hasProperty('openTelemetryVersion') ? project.getProperty('openTelemetryVersion') : "${libs.versions.opentelemetry.get()}"
        dataPrepperBaseImage = "eclipse-temurin:${targetJavaVersion}-jre"
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integrationTest/java')
            }
            resources.srcDir file('src/integrationTest/resources')
        }
    }

    tasks.named('processIntegrationTestResources') {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntime.extendsFrom testRuntime
    }

    task copyDataPrepperJar(type: Copy) {
        dependsOn project(':data-prepper-main').jar
        dependsOn project(':data-prepper-plugins').jar
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from project(':data-prepper-main').jar.archivePath
        from project(':data-prepper-main').configurations.runtimeClasspath
        into("${project.buildDir}/docker/${dataPrepperJarImageFilepath}")
    }

    task createDataPrepperDockerFile(type: Dockerfile) {
        dependsOn copyDataPrepperJar
        destFile = project.file('build/docker/Dockerfile')
        from(dataPrepperBaseImage)
        workingDir('/app/data-prepper')
        copyFile("${dataPrepperJarImageFilepath}", '/app/data-prepper/lib')
        defaultCommand('java', '-Ddata-prepper.dir=/app/data-prepper', '-cp', '/app/data-prepper/lib/*', 'org.opensearch.dataprepper.DataPrepperExecute')
    }

    task createDataPrepperNetwork(type: DockerCreateNetwork) {
        networkName = 'data_prepper_network'
    }

    task removeDataPrepperNetwork(type: DockerRemoveNetwork) {
        dependsOn createDataPrepperNetwork
        networkId = createDataPrepperNetwork.getNetworkId()
    }

    /**
     * OpenSearch Docker tasks
     */
    task pullOpenSearchDockerImage(type: DockerPullImage) {
        image = "opensearchproject/opensearch:${libs.versions.opensearch.get()}"
    }

    task createOpenSearchDockerContainer(type: DockerCreateContainer) {
        dependsOn createDataPrepperNetwork
        dependsOn pullOpenSearchDockerImage
        targetImageId pullOpenSearchDockerImage.image
        containerName = 'node-0.example.com'
        hostConfig.portBindings = ['9200:9200', '9600:9600']
        hostConfig.autoRemove = true
        hostConfig.network = createDataPrepperNetwork.getNetworkName()
        envVars = ['discovery.type':'single-node']
    }

    task startOpenSearchDockerContainer(type: DockerStartContainer) {
        dependsOn createOpenSearchDockerContainer
        targetContainerId createOpenSearchDockerContainer.getContainerId()

        doLast {
            sleep(90*1000)
        }
    }

    task stopOpenSearchDockerContainer(type: DockerStopContainer) {
        targetContainerId createOpenSearchDockerContainer.getContainerId()

        doLast {
            sleep(5*1000)
        }
    }

    dependencies {
        testImplementation testLibs.junit.vintage
    }
}
