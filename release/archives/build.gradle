plugins {
    id "de.undercouch.download" version "4.1.2" apply false
    id "jp.classmethod.aws.s3" version "0.41" apply false
}

/*
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  The OpenSearch Contributors require contributions made to
 *  this file be licensed under the Apache-2.0 license or a
 *  compatible open source license.
 *
 *  Modifications Copyright OpenSearch Contributors. See
 *  GitHub history for details.
 */

import com.amazonaws.services.s3.model.ObjectMetadata
import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask
import jp.classmethod.aws.gradle.s3.CreateBucketTask

subprojects {
    apply plugin: 'de.undercouch.download'
    apply plugin: 'distribution'
    apply plugin: 'jp.classmethod.aws.s3'

    dependencies {
        /* required to resolve below issue with aws sdk
          JAXB is unavailable. Will fallback to SDK implementation which may be less performant
         */
        implementation "javax.xml.bind:jaxb-api:2.3.1"
    }

    ext {
        archiveToTar = this.&archiveToTar
        awsS3Bucket = project.hasProperty("bucket") ? project.getProperty("bucket") : awsResources.get('default_bucket')
    }

    def supportedArchitectures = architectures.get(it.name) as String[]
    def platform = it.name

    //For each subproject and its supported architecture - Add distribution and upload tasks
    supportedArchitectures.each {
        def architecture = it
        def distName = "${platform}${architecture}" //eg linuxarm64
        def distNameWithJDK = "${distName}WithJDK"
        def downloadJDKTask = "download${architecture}JDK"

        //This adds two distributions for each supported architecture e.g. linuxarm64DistTar, linuxarm64WithJDKDistTar
        // incl. linuxarm64DistZip, linuxarm64WithJDKDistZip
        distributions {
            "${distName}" {
                distributionBaseName = "${project.rootProject.name}-${project.rootProject.version}-${platform}-${architecture}"
                contents {
                    with archiveToTar()
                    into('') {
                        from("data-prepper-tar-install-${architecture}.sh").rename("data-prepper-tar-install-${architecture}.sh", "data-prepper-tar-install.sh")
                        fileMode 0755
                    }
                }
            }
            "${distNameWithJDK}" {
                distributionBaseName = "${project.rootProject.name}-jdk-${project.rootProject.version}-${platform}-${architecture}"
                contents {
                    with archiveToTar()
                    into('openjdk') {
                        from tarTree("${buildDir}/${platform}${architecture}/openjdk/openjdk.tar.gz")
                    }
                    into('') {
                        from("data-prepper-tar-install-with-jdk-${architecture}.sh").rename("data-prepper-tar-install-with-jdk-${architecture}.sh", "data-prepper-tar-install.sh")
                        fileMode 0755
                    }
                }
            }
        }

        //by default distribution plugin adds project version to archive name, removing it
        distTar {
            project.version = ""
        }

        distZip {
            project.version = ""
        }

        //Adds one task per supported architecture for downloading appropriate JDK e.g. downloadarm64JDK
        tasks.create("${downloadJDKTask}") {
            doLast {
                download {
                    src jdkSources.get(platform + '_' + architecture)
                    dest "${buildDir}/${platform}${architecture}/openjdk/openjdk.tar.gz"
                    overwrite false
                }
            }
        }
    }

    tasks.withType(Tar) {
        dependsOn ':release:releasePrerequisites'
        compression = Compression.GZIP
        archiveExtension = 'tar.gz'
    }

    tasks.withType(Zip) {
        dependsOn ':release:releasePrerequisites'
    }

    tasks.create("${platform}Tar") {
        supportedArchitectures.each {
            dependsOn "${platform}${it}DistTar"
            dependsOn "${platform}${it}WithJDKDistTar"
        }
    }

    tasks.create("${platform}Zip") {
        supportedArchitectures.each {
            dependsOn "${platform}${it}DistZip"
            dependsOn "${platform}${it}WithJDKDistZip"
        }
    }

    aws {
        profileName = project.hasProperty("profile") ? project.getProperty("profile") : awsResources.get('default_profile')
        region = project.hasProperty("region") ? project.getProperty("region") : awsResources.get('default_region')
    }

    task createBucket(type: CreateBucketTask) {
        bucketName awsS3Bucket
        ifNotExists true
    }
    afterEvaluate {
        supportedArchitectures.each {
            def platformWithArchitecture = "${platform}${it}"
            def tarTask = tasks.getByName("${platformWithArchitecture}DistTar")
            def tarWithJDKTask = tasks.getByName("${platformWithArchitecture}WithJDKDistTar")
            def zipTask = tasks.getByName("${platformWithArchitecture}DistZip")
            def zipWithJDKTask = tasks.getByName("${platformWithArchitecture}WithJDKDistZip")

            tasks.getByName("${platformWithArchitecture}WithJDKDistTar").dependsOn("download${it}JDK")
            tasks.getByName("${platformWithArchitecture}WithJDKDistZip").dependsOn("download${it}JDK")

            tasks.create(name: "upload${platformWithArchitecture}TarToS3", type: AmazonS3FileUploadTask, dependsOn: createBucket) {
                dependsOn tarTask.name
                file file(tarTask.archiveFile.get().asFile.absolutePath)
                bucketName awsS3Bucket
                key "${project.rootProject.version}/${tarTask.archiveName}"

                def m = new ObjectMetadata()
                m.setCacheControl("no-cache, no-store")
                objectMetadata = m
            }

            tasks.create(name: "upload${platformWithArchitecture}ZipToS3", type: AmazonS3FileUploadTask, dependsOn: createBucket) {
                dependsOn zipTask.name
                file file(zipTask.archiveFile.get().asFile.absolutePath)
                bucketName awsS3Bucket
                key "${project.rootProject.version}/${zipTask.archiveName}"

                def m = new ObjectMetadata()
                m.setCacheControl("no-cache, no-store")
                objectMetadata = m
            }

            tasks.create(name: "upload${platformWithArchitecture}TarWithJDKToS3", type: AmazonS3FileUploadTask, dependsOn: createBucket) {
                dependsOn tarWithJDKTask.name
                file file(tarWithJDKTask.archiveFile.get().asFile.absolutePath)
                bucketName awsS3Bucket
                key "${project.rootProject.version}/${tarWithJDKTask.archiveName}"

                def m = new ObjectMetadata()
                m.setCacheControl("no-cache, no-store")
                objectMetadata = m
            }

            tasks.create(name: "upload${platformWithArchitecture}ZipWithJDKToS3", type: AmazonS3FileUploadTask, dependsOn: createBucket) {
                dependsOn zipWithJDKTask.name
                file file(zipWithJDKTask.archiveFile.get().asFile.absolutePath)
                bucketName awsS3Bucket
                key "${project.rootProject.version}/${zipWithJDKTask.archiveName}"

                def m = new ObjectMetadata()
                m.setCacheControl("no-cache, no-store")
                objectMetadata = m
            }
        }

        tasks.create("uploadToS3") {
            tasks.withType(AmazonS3FileUploadTask).each {
                dependsOn it.name
            }
        }
    }
}


CopySpec archiveToTar() {
    return copySpec {
        into('bin') {
            from project(':data-prepper-core').jar.archivePath
            fileMode 0755
        }
        into('examples') {
            from("${rootDir}/examples")
            dirMode 0750
            fileMode 0755
        }
        into('config') {
            from("${rootDir}/shared-config/log4j2-rolling.properties")
            from("${rootDir}/examples/config/example-data-prepper-config.yaml")
            from("${rootDir}/examples/config/example-pipelines.yaml")
        }
        into('') {
            from("${rootDir}/LICENSE")
            from("${rootDir}/NOTICE")
            from("${rootDir}/THIRD-PARTY")
            fileMode 0755
        }
    }
}

task uploadArchives {
    subprojects.each { dependsOn ':release:archives:' + it.name + ':uploadToS3' }
}

task buildTar {
    subprojects.each { dependsOn ':release:archives:' + it.name + ':' + it.name + 'Tar' }

}

task buildZip {
    subprojects.each { dependsOn ':release:archives:' + it.name + ':' + it.name + 'Zip' }
}

task buildArchives {
    dependsOn buildTar
    dependsOn buildZip
}