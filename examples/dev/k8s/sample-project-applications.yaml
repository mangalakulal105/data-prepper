apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: my-network
spec:
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.network/my-network: "true"
  podSelector:
    matchLabels:
      app.network/my-network: "true"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: opensearch-dashboard
  name: opensearch-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opensearch-dashboard
  strategy: {}
  template:
    metadata:
      labels:
        app.network/my-network: "true"
        app: opensearch-dashboard
    spec:
      containers:
      - env:
        - name: OPENSEARCH_HOSTS
          value: https://os:9200
        - name: OPENSEARCH_URL
          value: https://os:9200
        image: opensearchproject/opensearch-dashboards:1.0.0
        imagePullPolicy: ""
        name: opensearch-dashboard
        ports:
        - containerPort: 5601
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: opensearch-dashboard
  name: opensearch-dashboard
spec:
  ports:
  - name: "5601"
    port: 5601
    targetPort: 5601
  selector:
    app: opensearch-dashboard
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy: {}
  template:
    metadata:
      labels:
        app.network/my-network: "true"
        app: mysql
    spec:
      containers:
      - env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "yes"
        image: mysql:latest
        imagePullPolicy: ""
        name: mysql
        ports:
        - containerPort: 3306
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mysql
  name: mysql
spec:
  ports:
  - name: "3306"
    port: 3306
    targetPort: 3306
  selector:
    app: mysql
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: opensearch
  name: opensearch
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opensearch
  strategy: {}
  template:
    metadata:
      labels:
        app.network/my-network: "true"
        app: opensearch
    spec:
      containers:
      - env:
        - name: discovery.type
          value: single-node
        image: opensearchproject/opensearch:1.0.0
        imagePullPolicy: ""
        name: os
        ports:
        - containerPort: 9200
        - containerPort: 9600
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: opensearch
  name: opensearch
spec:
  ports:
  - name: "9200"
    port: 9200
    targetPort: 9200
  - name: "9600"
    port: 9600
    targetPort: 9600
  selector:
    app: opensearch
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: otel-collector
  name: otel-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.network/my-network: "true"
        app: otel-collector
    spec:
      containers:
      - args:
        - --config=/etc/otelconfig/otel-collector-config.yml
        image: otel/opentelemetry-collector:0.24.0
        imagePullPolicy: ""
        name: otel-collector
        ports:
        - containerPort: 55680
        resources: {}
        volumeMounts:
        - mountPath: /etc/otelconfig
          name: otel-collector-claim0
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: otel-collector-claim0
        configMap:
          name: otel-config
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: otel-collector
  name: otel-collector
spec:
  ports:
  - name: "55680"
    port: 55680
    targetPort: 55680
  selector:
    app: otel-collector
status:
  loadBalancer: {}
---
apiVersion: v1
data:
  otel-collector-config.yml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:55680

    exporters:
      otlp/2:
        endpoint: data-prepper:21890
        insecure: true
      logging:

    service:
      pipelines:
        traces:
          receivers: [otlp]
          exporters: [logging, otlp/2]
kind: ConfigMap
metadata:
  creationTimestamp: "2020-12-11T17:34:39Z"
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:data:
        .: {}
        f:otel-collector-config.yml: {}
    manager: kubectl-create
    operation: Update
    time: "2020-12-11T17:34:39Z"
  name: otel-config
  namespace: default
  resourceVersion: "28157"
  selfLink: /api/v1/namespaces/default/configmaps/otel-config
  uid: b5f10ee2-ccdb-4412-a693-4f5a626bb5cc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sample-app
  name: sample-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sample-app
  strategy: {}
  template:
    metadata:
      labels:
        app.network/my-network: "true"
        app: sample-app
    spec:
      containers:
      - env:
        - name: MYSQL_HOST
          value: mysql
        - name: MYSQL_PORT
          value: "3306"
        - name: OTEL_EXPORTER
          value: otlp
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: otel-collector:55680
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name=analytics-service
        - name: OTLP
          value: otel-collector
        - name: WAIT_HOSTS
          value: otel-collector:55680, mysql:3306
        image: example-k8s/sample-app
        imagePullPolicy: "Never"
        name: sample-app
        ports:
        - containerPort: 8082
        - containerPort: 8083
        - containerPort: 8084
        - containerPort: 8085
        - containerPort: 8086
        - containerPort: 8087
        - containerPort: 8088
        - containerPort: 8089
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sample-app
  name: sample-app
spec:
  ports:
  - name: "8082"
    port: 8082
    targetPort: 8082
  - name: "8083"
    port: 8083
    targetPort: 8083
  - name: "8084"
    port: 8084
    targetPort: 8084
  - name: "8085"
    port: 8085
    targetPort: 8085
  - name: "8086"
    port: 8086
    targetPort: 8086
  - name: "8087"
    port: 8087
    targetPort: 8087
  - name: "8088"
    port: 8088
    targetPort: 8088
  - name: "8089"
    port: 8089
    targetPort: 8089
  selector:
    app: sample-app
status:
  loadBalancer: {}
---
