/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

/**
 * End-to-end test docker network
 */

def AGGREGATE_PIPELINE_YAML = 'aggregate-e2e-pipeline.yml'
def DATA_PREPPER_CONFIG_LOCAL_NODE = 'data_prepper_local_node.yml'
def DATA_PREPPER_CONFIG_STATIC = 'data_prepper_static.yml'


/**
 * Represents the configurations needed for peer-forwarder end-to-end tests.
 */
class PeerForwarderTestConfiguration {
    PeerForwarderTestConfiguration(
            String testName,
            String description,
            String testFilters,
            String containerName,
            String pipelineConfiguration,
            String dataPrepperConfiguration) {
        this.testName = testName
        this.description = description
        this.testFilters = testFilters
        this.containerName = containerName
        this.pipelineConfiguration = pipelineConfiguration
        this.dataPrepperConfiguration = dataPrepperConfiguration
    }
    String testName
    String description
    String testFilters
    String containerName
    String pipelineConfiguration
    String dataPrepperConfiguration
}

List<PeerForwarderTestConfiguration> peerForwarderTestConfigurations = [
        new PeerForwarderTestConfiguration(
                'localAggregateEndToEndTest',
                'Runs the local log aggregation end-to-end test.',
                'org.opensearch.dataprepper.integration.peerforwarder.EndToEndPeerForwarderTest.testAggregatePipelineWithSingleNodeEndToEnd*',
                'data-prepper',
                AGGREGATE_PIPELINE_YAML,
                DATA_PREPPER_CONFIG_LOCAL_NODE
        ),
        new PeerForwarderTestConfiguration(
                'staticAggregateEndToEndTest',
                'Runs the local log aggregation end-to-end test.',
                'org.opensearch.dataprepper.integration.peerforwarder.EndToEndPeerForwarderTest.testAggregatePipelineWithMultipleNodesEndToEnd*',
                'node.data-prepper.example.com',
                AGGREGATE_PIPELINE_YAML,
                DATA_PREPPER_CONFIG_STATIC
        ),
        new PeerForwarderTestConfiguration(
                'staticLogMetricsEndToEndTest',
                'Runs the local log aggregation end-to-end test.',
                'org.opensearch.dataprepper.integration.peerforwarder.EndToEndLogMetricsTest.testLogMetricsPipelineWithMultipleNodesEndToEnd*',
                'node.data-prepper.example.com',
                'log-metrics-pipeline.yml',
                DATA_PREPPER_CONFIG_STATIC
        )
]

/**
 * Creates a container name from a base name. If the name looks like a DNS entry
 * it adds the index after the first part. Otherwise, it appends the index to the end.
 *
 * @param name The base container name
 * @param index The index of the container to create
 * @return The container name to use.
 */
static def createContainerName(String name, int index) {
    def nameParts = name.split('\\.', 2)

    return "${nameParts[0]}${index}${nameParts.length==2 ? '.' + nameParts[1] : ''}"
}

peerForwarderTestConfigurations.each { testConfiguration ->
    tasks.register("start${testConfiguration.testName}All")
    tasks.register("remove${testConfiguration.testName}All")

    (0..1).each { containerIndex ->
        tasks.register("create${testConfiguration.testName}${containerIndex}", DockerCreateContainer) {
            dependsOn dataPrepperDockerImage
            dependsOn createDataPrepperNetwork
            containerName = createContainerName(testConfiguration.containerName, containerIndex)
            exposePorts('tcp', [2021])
            hostConfig.portBindings = ["${2021+containerIndex}:2021"]
            hostConfig.binds = [
                    (project.file("src/integrationTest/resources/${testConfiguration.pipelineConfiguration}").toString())   : '/usr/share/data-prepper/pipelines/test-pipeline.yaml',
                    (project.file("src/integrationTest/resources/${testConfiguration.dataPrepperConfiguration}").toString()): '/usr/share/data-prepper/config/data-prepper-config.yaml',
                    (project.file('src/integrationTest/resources/default_certificate.pem').toString()) : '/usr/share/data-prepper/config/default_certificate.pem',
                    (project.file('src/integrationTest/resources/default_private_key.pem').toString()): '/usr/share/data-prepper/config/default_private_key.pem'
            ]
            hostConfig.network = createDataPrepperNetwork.getNetworkName()
            targetImageId dataPrepperDockerImage.imageId
        }

        tasks.register("start${testConfiguration.testName}${containerIndex}", DockerStartContainer) {
            dependsOn "create${testConfiguration.testName}${containerIndex}"
            dependsOn 'startOpenSearchDockerContainer'
            mustRunAfter 'startOpenSearchDockerContainer'
            targetContainerId tasks.getByName("create${testConfiguration.testName}${containerIndex}").getContainerId()
        }

        tasks.named("start${testConfiguration.testName}All").configure {
            dependsOn "start${testConfiguration.testName}${containerIndex}"
        }

        tasks.register("stop${testConfiguration.testName}${containerIndex}", DockerStopContainer) {
            dependsOn "${testConfiguration.testName}"
            targetContainerId tasks.getByName("create${testConfiguration.testName}${containerIndex}").getContainerId()
        }

        tasks.register("remove${testConfiguration.testName}${containerIndex}", DockerRemoveContainer) {
            dependsOn "stop${testConfiguration.testName}${containerIndex}"
            targetContainerId tasks.getByName("stop${testConfiguration.testName}${containerIndex}").getContainerId()
        }

        tasks.named("remove${testConfiguration.testName}All").configure {
            dependsOn "remove${testConfiguration.testName}${containerIndex}"
        }
    }

    tasks.register(testConfiguration.testName, Test) {
        dependsOn build
        dependsOn startOpenSearchDockerContainer
        dependsOn "start${testConfiguration.testName}All"

        // Wait for Data Prepper image to be ready
        doFirst {
            sleep(15 * 1000)
        }

        description = testConfiguration.description
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        filter {
            includeTestsMatching testConfiguration.testFilters
        }

        finalizedBy stopOpenSearchDockerContainer
        finalizedBy "remove${testConfiguration.testName}All"
        finalizedBy removeDataPrepperNetwork
    }
}


dependencies {
    integrationTestImplementation project(':data-prepper-api')
    integrationTestImplementation project(':data-prepper-plugins:common')
    integrationTestImplementation project(':data-prepper-plugins:log-generator-source')
    integrationTestImplementation project(':data-prepper-plugins:opensearch')
    integrationTestImplementation project(':data-prepper-plugins:aws-plugin-api')
    integrationTestImplementation project(':data-prepper-plugins:otel-trace-group-processor')
    integrationTestImplementation 'org.awaitility:awaitility:4.2.0'
    integrationTestImplementation libs.opentelemetry.proto
    integrationTestImplementation libs.protobuf.util
    integrationTestImplementation libs.armeria.core
    integrationTestImplementation libs.armeria.grpc
    integrationTestImplementation libs.opensearch.rhlc
    integrationTestImplementation 'com.fasterxml.jackson.core:jackson-databind'
}
