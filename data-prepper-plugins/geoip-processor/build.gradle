plugins{
    id 'de.undercouch.download' version '4.1.2'
}
apply plugin: 'de.undercouch.download'

import de.undercouch.gradle.tasks.download.Download

/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

dependencies {
    implementation project(':data-prepper-api')
    implementation project(path: ':data-prepper-plugins:common')
    implementation 'io.micrometer:micrometer-core'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.apache.commons:commons-compress:1.21'

    implementation 'org.mapdb:mapdb:3.0.8'
    implementation 'commons-io:commons-io:2.12.0'
    implementation 'software.amazon.awssdk:aws-sdk-java:2.20.67'
    implementation 'software.amazon.awssdk:s3-transfer-manager'
    implementation 'software.amazon.awssdk.crt:aws-crt:0.21.17'
    implementation 'com.maxmind.geoip2:geoip2:4.0.1'
    implementation 'com.maxmind.db:maxmind-db:3.0.0'

    implementation libs.commons.lang3
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    testImplementation project(':data-prepper-test-common')
}
def geoIP2='GeoIP2'
def geoLite2= 'GeoLite2'
task downloadFile(type: Download) {

    def urls = [
            'https://raw.githubusercontent.com/maxmind/MaxMind-DB/main/test-data/GeoIP2-City-Test.mmdb',
            'https://raw.githubusercontent.com/maxmind/MaxMind-DB/main/test-data/GeoIP2-Country-Test.mmdb',
            'https://raw.githubusercontent.com/maxmind/MaxMind-DB/main/test-data/GeoLite2-ASN-Test.mmdb'
    ]
    def mmdbFileExtension = '.mmdb'
    def baseDirPath =  'src/test/resources/mmdb-file/geo-lite2/'

    urls.each { url ->
        src(url)
        dest(baseDirPath)
        doLast {

            def testFileName = url.substring(url.lastIndexOf('/') + 1)
            def testMmdbSubString = testFileName.substring(testFileName.lastIndexOf('-'))
            def fileName = testFileName.substring(0, testFileName.length() - testMmdbSubString.length())

            if(fileName.contains(geoIP2)) {
                fileName = fileName.replace(geoIP2, geoLite2)
            }
            File sourceFile = file(baseDirPath+testFileName)
            File destinationFile = file( baseDirPath+fileName+mmdbFileExtension)
            sourceFile.renameTo(destinationFile)

        }

    }


}
task downloadEnterpriseFile(type: Download) {
    def urls = [
            'https://raw.githubusercontent.com/maxmind/MaxMind-DB/main/test-data/GeoIP2-Enterprise-Test.mmdb'
    ]
    def mmdbFileExtension = '.mmdb'
    def baseDirPath =  'src/test/resources/mmdb-file/geo-enterprise/'

    urls.each { url ->
        src(url)
        def testFileName = url.substring(url.lastIndexOf('/') + 1)
        def testMmdbSubString = testFileName.substring(testFileName.lastIndexOf('-'))
        def fileName = testFileName.substring(0, testFileName.length() - testMmdbSubString.length())

        dest(baseDirPath+testFileName)
        doLast {
            if(fileName.contains(geoIP2)) {
                fileName = fileName.replace(geoIP2, geoLite2)
            }
            File sourceFile = file(baseDirPath+testFileName)
            File destinationFile = file( baseDirPath+fileName+mmdbFileExtension)
            sourceFile.renameTo(destinationFile)
        }

    }

}


test {
    dependsOn (downloadFile,downloadEnterpriseFile)
    useJUnitPlatform()
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.1 // temporarily reduce coverage for the builds to pass
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs

    useJUnitPlatform()

    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperty 'tests.geoipProcessor.maxmindLicenseKey', System.getProperty('tests.geoipProcessor.maxmindLicenseKey')

    filter {
        includeTestsMatching '*IT'
    }
}