/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */
import com.github.jk1.license.render.TextReportRenderer

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jk1:gradle-license-report:1.17'
    }
}

plugins {
    id 'com.diffplug.spotless' version '6.1.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

apply from: file("${rootDir}/build-resources.gradle")
allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'com.github.jk1.dependency-license-report'

    group = 'org.opensearch.dataprepper'
    
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    spotless {
        format 'markdown', {
            target '*.md'
            // TODO: enrich format rules
            endWithNewline()
        }
        format 'misc', {
            target '.gitignore', '*.yml', '*.yaml'
            // TODO: enrich format rules
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    sourceCompatibility = '1.8'
    spotless {
        java {
            targetExclude 'build/generated-src/antlr/**'
            // TODO: enrich format rules
            removeUnusedImports()
        }
    }
    dependencies {
        implementation 'com.google.guava:guava:31.0.1-jre'
        implementation platform('io.micrometer:micrometer-bom:1.7.5')
        implementation 'org.slf4j:slf4j-api:1.7.32'
        testImplementation platform("org.junit:junit-bom:${versionMap.junitJupiter}")
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.junit.vintage:junit-vintage-engine'
        testImplementation "org.mockito:mockito-core:${versionMap.mockito}"
        testImplementation "org.mockito:mockito-junit-jupiter:${versionMap.mockito}"
        constraints {
            implementation('org.apache.httpcomponents:httpclient') {
                version {
                    require '4.5.13'
                }
                because 'We want the newest version of httpclient.'
            }
            implementation('org.apache.logging.log4j:log4j-core') {
                version {
                    require '2.17.1'
                }
                because 'Log4j 2.17.1 fixes CVE-2021-44228, CVE-2021-45046, CVE-2021-45105, and CVE-2021-44832'
            }
            implementation('org.apache.logging.log4j:log4j-api') {
                version {
                    require '2.17.1'
                }
                because 'the build fails if the Log4j API is not update along with log4j-core'
            }
        }
        constraints {
            implementation('io.netty:netty-tcnative-boringssl-static') {
                version {
                    require '2.0.42.Final'
                }
                because 'Netty 4.1.66+ requires new classes and methods in this version.'
            }
        }
    }
    test {
        useJUnitPlatform()
    }

    configurations.all {
        resolutionStrategy.eachDependency { def details ->
            if (details.requested.group == 'io.netty' && !details.requested.name.startsWith('netty-tcnative')) {
                details.useVersion '4.1.68.Final'
                details.because 'Fixes CVE-2021-37136 and CVE-2021-37137. See https://netty.io/news/2021/09/09/4-1-68-Final.html'
            }
        }
    }

    build.dependsOn test
    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.enabled true
        }
    }

    task allDeps(type: DependencyReportTask) {}
}

configure(subprojects.findAll {it.name != 'data-prepper-api'}) {
    dependencies {
        implementation platform('com.fasterxml.jackson:jackson-bom:2.13.0')
        implementation platform('software.amazon.awssdk:bom:2.17.15')
        implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.67')
        implementation 'jakarta.validation:jakarta.validation-api:3.0.1'
    }
}

configure(mavenArtifactProjects) {
    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        repositories {
            mavenLocal()
        }
        publications {
            maven(MavenPublication) {
                from components.java
                pom {
                    name = project.name
                    description = "Data Prepper project: ${project.name}"
                    url = 'https://github.com/opensearch-project/data-prepper'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            name = 'OpenSearch'
                            url = 'https://github.com/opensearch-project'
                        }
                    }
                    scm {
                        url = 'https://github.com/opensearch-project/data-prepper'
                    }
                }
            }
        }
    }
}

configure(coreProjects) {
    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/reports/jacocoHtml")
        }
    }
    test {
        finalizedBy jacocoTestReport // report is always generated after tests run
    }
    jacocoTestCoverageVerification {
        dependsOn jacocoTestReport
        violationRules {
            rule {
                limit {
                    minimum = 0.65 //TODO increase this to 0.75
                }
            }
        }
    }
    check.dependsOn jacocoTestCoverageVerification
}

licenseReport {
    excludeOwnGroup = true
    excludeBoms = true
    excludes = ['software.amazon.awssdk:bom']
    renderers = new TextReportRenderer()
}

task generateThirdPartyReport(type: Copy) {
    from 'build/reports/dependency-license/'
    into '.'
    include 'THIRD-PARTY-NOTICES.txt'
    rename 'THIRD-PARTY-NOTICES.txt', 'THIRD-PARTY'
    generateThirdPartyReport.dependsOn(generateLicenseReport)
}
