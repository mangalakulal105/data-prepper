/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

sourceSets {
    main {
        resources {
            srcDirs += "../shared-config"
        }
    }
}

dependencies {
    implementation project(':data-prepper-api')
    implementation project(':data-prepper-plugins')
    implementation project(':data-prepper-plugins:common')
    implementation project(':data-prepper-logstash-configuration')
    testImplementation project(':data-prepper-plugins:common').sourceSets.test.output
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation "javax.validation:validation-api:2.0.1.Final"
    implementation "org.apache.bval:bval-extras:2.0.5"
    implementation "org.apache.bval:bval-jsr:2.0.5"
    implementation "org.reflections:reflections:0.10.2"
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-registry-cloudwatch2'
    implementation 'software.amazon.awssdk:cloudwatch'
    implementation platform('org.apache.logging.log4j:log4j-bom:2.15.0')
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl'
    testImplementation "org.hamcrest:hamcrest:2.2"
    testImplementation "org.mockito:mockito-inline:${versionMap.mockito}"
}

jar {
    dependsOn configurations.runtimeClasspath
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'com.amazon.dataprepper.DataPrepperExecute')
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule { //in addition to core projects rule
            limit {
                // temporarily lowering this to unblock the release.
                // some builds pass with 0.9 coverage, some fail with 0.89
                minimum = 0.89
            }
        }
    }
}
