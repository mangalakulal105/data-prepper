apply plugin: DockerRemoteApiPlugin


/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */


import com.bmuschko.gradle.docker.DockerRemoteApiPlugin
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerRemoveNetwork

/**
 * End-to-end test docker network
 */
task createDataPrepperNetwork(type: DockerCreateNetwork) {
    networkName = "data_prepper_network"
}

task removeDataPrepperNetwork(type: DockerRemoveNetwork) {
    dependsOn createDataPrepperNetwork
    networkId = createDataPrepperNetwork.getNetworkId()
}

def RAW_SPAN_PIPELINE_YAML = "raw-span-e2e-pipeline.yml"
// TODO: refactor this file once core-peerforwarder is ready
def RAW_SPAN_PIPELINE_PEER_FORWARDER_YAML = "raw-span-e2e-pipeline-peer-forwarder.yml"
// TODO: change or remove the file once core-peerforwarder is ready
def RAW_SPAN_PIPELINE_LATEST_RELEASE_YAML = "raw-span-e2e-pipeline-latest-release.yml"
def SERVICE_MAP_PIPELINE_YAML = "service-map-e2e-pipeline.yml"

/**
 * DataPrepper Docker tasks
 */
task createDataPrepperDockerFile(type: Dockerfile) {
    dependsOn copyDataPrepperJar
    destFile = project.file('build/docker/Dockerfile')
    from(dataPrepperBaseImage)
    exposePort(21890)
    exposePort(4900)
    workingDir("/app")
    copyFile("${dataPrepperJarFilepath}", "/app/data-prepper")
    copyFile("src/integrationTest/resources/${RAW_SPAN_PIPELINE_YAML}", "/app/${RAW_SPAN_PIPELINE_YAML}")
    copyFile("src/integrationTest/resources/${RAW_SPAN_PIPELINE_PEER_FORWARDER_YAML}", "/app/${RAW_SPAN_PIPELINE_PEER_FORWARDER_YAML}")
    copyFile("src/integrationTest/resources/${RAW_SPAN_PIPELINE_LATEST_RELEASE_YAML}", "/app/${RAW_SPAN_PIPELINE_LATEST_RELEASE_YAML}")
    copyFile("src/integrationTest/resources/${SERVICE_MAP_PIPELINE_YAML}", "/app/${SERVICE_MAP_PIPELINE_YAML}")
    copyFile("src/integrationTest/resources/data_prepper.yml", "/app/data_prepper.yml")
    defaultCommand('java', '-cp', 'data-prepper/*', 'org.opensearch.dataprepper.DataPrepperExecute', "/app/${RAW_SPAN_PIPELINE_YAML}", "/app/data_prepper.yml")
}

task buildDataPrepperDockerImage(type: DockerBuildImage) {
    dependsOn createDataPrepperDockerFile
    inputDir  = file(".")
    dockerFile  = file("build/docker/Dockerfile")
    images.add("integ-test-pipeline-image")
}

def createDataPrepperDockerContainer(final String taskBaseName, final String dataPrepperName, final int grpcPort,
                                     final int serverPort, final String pipelineConfigYAML) {
    return tasks.create("create${taskBaseName}", DockerCreateContainer) {
        dependsOn buildDataPrepperDockerImage
        dependsOn createDataPrepperNetwork
        containerName = dataPrepperName
        hostConfig.portBindings = [String.format('%d:21890', grpcPort), String.format('%d:4900', serverPort)]
        hostConfig.network = createDataPrepperNetwork.getNetworkName()
        cmd = ['java', '-cp', 'data-prepper/*', 'org.opensearch.dataprepper.DataPrepperExecute', pipelineConfigYAML, "/app/data_prepper.yml"]
        targetImageId buildDataPrepperDockerImage.getImageId()
    }
}

def startDataPrepperDockerContainer(final DockerCreateContainer createDataPrepperDockerContainerTask) {
    return tasks.create("start${createDataPrepperDockerContainerTask.getName()}", DockerStartContainer) {
        dependsOn createDataPrepperDockerContainerTask
        targetContainerId createDataPrepperDockerContainerTask.getContainerId()
    }
}

def stopDataPrepperDockerContainer(final DockerStartContainer startDataPrepperDockerContainerTask) {
    return tasks.create("stop${startDataPrepperDockerContainerTask.getName()}", DockerStopContainer) {
        targetContainerId startDataPrepperDockerContainerTask.getContainerId()
    }
}

def removeDataPrepperDockerContainer(final DockerStopContainer stopDataPrepperDockerContainerTask) {
    return tasks.create("remove${stopDataPrepperDockerContainerTask.getName()}", DockerRemoveContainer) {
        targetContainerId stopDataPrepperDockerContainerTask.getContainerId()
    }
}

task pullDataPrepperDockerImage(type: DockerPullImage) {
    image = 'opensearchproject/data-prepper:latest'
}

def createDataPrepperDockerContainerFromPullImage(final String taskBaseName, final String dataPrepperName, final int grpcPort,
                                                  final int serverPort, final String pipelineConfigYAML) {
    return tasks.create("create${taskBaseName}", DockerCreateContainer) {
        dependsOn createDataPrepperNetwork
        dependsOn pullDataPrepperDockerImage
        containerName = dataPrepperName
        hostConfig.portBindings = [String.format('%d:21890', grpcPort), String.format('%d:4900', serverPort)]
        exposePorts('tcp', [21890, 4900])
        hostConfig.network = createDataPrepperNetwork.getNetworkName()
        hostConfig.binds = [(project.file(pipelineConfigYAML).toString()):"/usr/share/data-prepper/pipelines.yaml",
                            (project.file("src/integrationTest/resources/data_prepper.yml").toString()):"/usr/share/data-prepper/data-prepper-config.yaml"]
        targetImageId pullDataPrepperDockerImage.image
    }
}

/**
 * OpenSearch Docker tasks
 */
task pullOpenSearchDockerImage(type: DockerPullImage) {
    image = "opensearchproject/opensearch:${versionMap.opensearchVersion}"
}

task createOpenSearchDockerContainer(type: DockerCreateContainer) {
    dependsOn createDataPrepperNetwork
    dependsOn pullOpenSearchDockerImage
    targetImageId pullOpenSearchDockerImage.image
    containerName = "node-0.example.com"
    hostConfig.portBindings = ['9200:9200', '9600:9600']
    hostConfig.autoRemove = true
    hostConfig.network = createDataPrepperNetwork.getNetworkName()
    envVars = ['discovery.type':'single-node']
}

task startOpenSearchDockerContainer(type: DockerStartContainer) {
    dependsOn createOpenSearchDockerContainer
    targetContainerId createOpenSearchDockerContainer.getContainerId()

    doLast {
        sleep(90*1000)
    }
}

task stopOpenSearchDockerContainer(type: DockerStopContainer) {
    targetContainerId createOpenSearchDockerContainer.getContainerId()

    doLast {
        sleep(5*1000)
    }
}

/**
 * End to end test. Spins up OpenSearch and DataPrepper docker containers, then runs the integ test
 * Stops the docker containers when finished
 */
def createEndToEndTest(final String testName, final String includeTestsMatchPattern,
                       final DockerCreateContainer createDataPrepper1Task, final DockerCreateContainer createDataPrepper2Task) {
    return tasks.create(testName, Test) {
        dependsOn build
        dependsOn startOpenSearchDockerContainer
        def startDataPrepper1Task = startDataPrepperDockerContainer(createDataPrepper1Task as DockerCreateContainer)
        def startDataPrepper2Task = startDataPrepperDockerContainer(createDataPrepper2Task as DockerCreateContainer)
        dependsOn startDataPrepper1Task
        dependsOn startDataPrepper2Task
        startDataPrepper1Task.mustRunAfter 'startOpenSearchDockerContainer'
        startDataPrepper2Task.mustRunAfter 'startOpenSearchDockerContainer'
        // wait for data-preppers to be ready
        doFirst {
            sleep(15*1000)
        }

        description = 'Runs the raw span integration tests.'
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        filter {
            includeTestsMatching includeTestsMatchPattern
        }

        finalizedBy stopOpenSearchDockerContainer
        def stopDataPrepper1Task = stopDataPrepperDockerContainer(startDataPrepper1Task as DockerStartContainer)
        def stopDataPrepper2Task = stopDataPrepperDockerContainer(startDataPrepper2Task as DockerStartContainer)
        finalizedBy stopDataPrepper1Task
        finalizedBy stopDataPrepper2Task
        finalizedBy removeDataPrepperDockerContainer(stopDataPrepper1Task as DockerStopContainer)
        finalizedBy removeDataPrepperDockerContainer(stopDataPrepper2Task as DockerStopContainer)
        finalizedBy removeDataPrepperNetwork
    }
}

def includeRawSpanTestsMatchPattern = "com.amazon.dataprepper.integration.trace.EndToEndRawSpanTest.testPipelineEndToEnd*"

def createRawSpanDataPrepper1Task = createDataPrepperDockerContainer(
        "rawSpanDataPrepper1", "dataprepper1", 21890, 4900, "/app/${RAW_SPAN_PIPELINE_YAML}")
def createRawSpanDataPrepper2Task = createDataPrepperDockerContainer(
        "rawSpanDataPrepper2", "dataprepper2", 21891, 4901, "/app/${RAW_SPAN_PIPELINE_YAML}")

def rawSpanEndToEndTest = createEndToEndTest("rawSpanEndToEndTest", includeRawSpanTestsMatchPattern,
        createRawSpanDataPrepper1Task, createRawSpanDataPrepper2Task)

def rawSpanDataPrepperEventFromBuild = createDataPrepperDockerContainer(
        "rawSpanDataPrepperEventFromBuild", "dataprepper1", 21890, 4900, "/app/${RAW_SPAN_PIPELINE_PEER_FORWARDER_YAML}")
def rawSpanDataPrepperLatestFromPull = createDataPrepperDockerContainerFromPullImage(
        "rawSpanDataPrepperLatestFromPull", "dataprepper2", 21891, 4901, "src/integrationTest/resources/${RAW_SPAN_PIPELINE_LATEST_RELEASE_YAML}")

def rawSpanLatestReleaseCompatibilityEndToEndTest = createEndToEndTest("rawSpanLatestReleaseCompatibilityEndToEndTest",
        includeRawSpanTestsMatchPattern,
        rawSpanDataPrepperEventFromBuild, rawSpanDataPrepperLatestFromPull)

def includeServiceMapTestsMatchPattern = "com.amazon.dataprepper.integration.trace.EndToEndServiceMapTest*"

def createServiceMapDataPrepper1Task = createDataPrepperDockerContainer(
        "serviceMapDataPrepper1", "dataprepper1", 21890, 4900, "/app/${SERVICE_MAP_PIPELINE_YAML}")
def createServiceMapDataPrepper2Task = createDataPrepperDockerContainer(
        "serviceMapDataPrepper2", "dataprepper2", 21891, 4901, "/app/${SERVICE_MAP_PIPELINE_YAML}")

def serviceMapEndToEndTest = createEndToEndTest("serviceMapEndToEndTest", includeServiceMapTestsMatchPattern,
        createServiceMapDataPrepper1Task, createServiceMapDataPrepper2Task)

dependencies {
    integrationTestImplementation project(':data-prepper-api')
    integrationTestImplementation project(':data-prepper-plugins:common')
    integrationTestImplementation project(':data-prepper-plugins:opensearch')
    integrationTestImplementation project(':data-prepper-plugins:otel-trace-group-processor')
    integrationTestImplementation 'org.awaitility:awaitility:4.2.0'
    integrationTestImplementation "io.opentelemetry:opentelemetry-proto:${versionMap.opentelemetryProto}"
    integrationTestImplementation "com.google.protobuf:protobuf-java-util:${versionMap.protobufJavaUtil}"
    integrationTestImplementation "com.linecorp.armeria:armeria:${versionMap.armeria}"
    integrationTestImplementation "com.linecorp.armeria:armeria-grpc:${versionMap.armeriaGrpc}"
    integrationTestImplementation "org.opensearch.client:opensearch-rest-high-level-client:${versionMap.opensearchVersion}"
    integrationTestImplementation 'com.fasterxml.jackson.core:jackson-databind'
}
