/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

buildscript {
    ext {
        opensearchVersion = System.getProperty('opensearch.version', "${versionMap.opensearchVersion}")
    }

    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        constraints {
            classpath('com.netflix.nebula:nebula-core') {
                version {
                    require '3.0.1'
                }
                because 'Nebula 3.0.0 is not in Maven Central and any dependency on it will attempt to use JCenter.'
            }
        }
    }
}

plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':data-prepper-api')
    testImplementation project(':data-prepper-api').sourceSets.test.output
    implementation project(':data-prepper-plugins:common')
    implementation "org.opensearch.client:opensearch-rest-high-level-client:${opensearchVersion}"
    implementation "org.opensearch.client:opensearch-rest-client:${opensearchVersion}"
    implementation 'org.opensearch.client:opensearch-java:1.0.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'software.amazon.awssdk:auth:2.17.15'
    implementation 'software.amazon.awssdk:http-client-spi:2.17.15'
    implementation 'software.amazon.awssdk:sdk-core:2.17.15'
    implementation 'software.amazon.awssdk:aws-core:2.17.207'
    implementation 'software.amazon.awssdk:regions:2.17.15'
    implementation 'software.amazon.awssdk:utils:2.17.15'
    implementation 'software.amazon.awssdk:sts:2.17.15'
    implementation 'software.amazon.awssdk:url-connection-client:2.17.15'
    implementation 'software.amazon.awssdk:arns:2.17.15'
    implementation 'io.micrometer:micrometer-core'
    testImplementation 'org.awaitility:awaitility:4.1.1'
    testImplementation 'commons-io:commons-io:2.11.0'
    testImplementation 'net.bytebuddy:byte-buddy:1.12.8'
    testImplementation 'net.bytebuddy:byte-buddy-agent:1.11.20'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

tasks.withType(JavaCompile).getByName('compileIntegrationTestJava').configure {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

task integrationTest(type: Test) {
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs

    useJUnitPlatform()
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }

    classpath = sourceSets.integrationTest.runtimeClasspath
    systemProperty 'tests.opensearch.host', System.getProperty('tests.opensearch.host')
    systemProperty 'tests.opensearch.bundle', System.getProperty('tests.opensearch.bundle')
    systemProperty 'tests.opensearch.user', System.getProperty('tests.opensearch.user')
    systemProperty 'tests.opensearch.password', System.getProperty('tests.opensearch.password')

    filter {
        includeTestsMatching '*IT'
    }
}


jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // TODO: find a way to include the classes covered by OpenSearch test framework
                    'com/amazon/dataprepper/plugins/sink/opensearch/OpenSearchSink.class',
                    'com/amazon/dataprepper/plugins/sink/opensearch/IndexStateManagement.class'
            ])
        })
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            element = 'CLASS'
            excludes = [
                    // TODO: find a way to include the classes covered by OpenSearch test framework
                    'com.amazon.dataprepper.plugins.sink.opensearch.OpenSearchSink',
                    'com.amazon.dataprepper.plugins.sink.opensearch.IndexStateManagement'
            ]
            limit {
                minimum = 0.90
            }
        }
    }
}
